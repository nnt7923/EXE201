const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const checkAiAccess = require('../middleware/checkaiaccess');
const aiService = require('../services/ai');

// Route t·∫°o g·ª£i √Ω l·ªãch tr√¨nh
router.post('/itinerary-suggestions', authenticateToken, checkAiAccess, async (req, res) => {
  try {
    const { destination, duration, budget, interests } = req.body;

    // Validate input
    if (!destination || !duration) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ƒëi·ªÉm ƒë·∫øn v√† th·ªùi gian du l·ªãch.'
      });
    }

    const preferences = {
      destination,
      duration: parseInt(duration),
      budget: budget || 'Kh√¥ng gi·ªõi h·∫°n',
      interests: interests || []
    };

    const suggestions = await aiService.generateItinerarySuggestions(
      preferences.destination,
      preferences.duration,
      preferences.budget,
      preferences.interests,
      req.user.id
    );

    // Increment AI usage count after successful generation
    console.log('üî¢ Incrementing AI usage count for user:', req.user.id);
    await req.subscription.updateOne({ $inc: { aiUsageCount: 1 } });
    console.log('‚úÖ AI usage count incremented successfully');
    
    const updatedRemainingUsage = req.remainingAiUsage - 1;

    res.json({
      success: true,
      data: suggestions,
      message: 'T·∫°o g·ª£i √Ω l·ªãch tr√¨nh th√†nh c√¥ng.',
      aiLimit: req.aiLimit,
      remainingUsage: updatedRemainingUsage,
      subscription: {
        plan: req.subscription.plan.name,
        endDate: req.subscription.endDate
      }
    });

  } catch (error) {
    console.error('L·ªói t·∫°o g·ª£i √Ω l·ªãch tr√¨nh:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'L·ªói h·ªá th·ªëng khi t·∫°o g·ª£i √Ω l·ªãch tr√¨nh.'
    });
  }
});

// Route t·∫°o g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm
router.post('/place-suggestions', authenticateToken, checkAiAccess, async (req, res) => {
  try {
    const { query } = req.body;

    if (!query) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p t·ª´ kh√≥a t√¨m ki·∫øm.'
      });
    }

    const suggestions = await aiService.generatePlaceSuggestions(query, req.user.id);

    // Increment AI usage count after successful generation
    await req.subscription.updateOne({ $inc: { aiUsageCount: 1 } });
    
    const updatedRemainingUsage = req.remainingAiUsage - 1;

    res.json({
      success: true,
      data: suggestions,
      message: 'T·∫°o g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng.',
      aiLimit: req.aiLimit,
      remainingUsage: updatedRemainingUsage,
      subscription: {
        plan: req.subscription.plan.name,
        endDate: req.subscription.endDate
      }
    });

  } catch (error) {
    console.error('L·ªói t·∫°o g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'L·ªói h·ªá th·ªëng khi t·∫°o g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm.'
    });
  }
});

// Route ki·ªÉm tra quy·ªÅn truy c·∫≠p AI
router.get('/check-access', authenticateToken, checkAiAccess, async (req, res) => {
  try {
    res.json({
      success: true,
      data: {
        hasAccess: true,
        aiLimit: req.aiLimit,
        aiUsageCount: req.subscription.aiUsageCount || 0,
        remainingUsage: req.remainingAiUsage,
        subscription: {
          plan: req.subscription.plan.name,
          endDate: req.subscription.endDate,
          status: req.subscription.status
        }
      },
      message: 'B·∫°n c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng AI.'
    });
  } catch (error) {
    console.error('L·ªói ki·ªÉm tra quy·ªÅn AI:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói h·ªá th·ªëng khi ki·ªÉm tra quy·ªÅn truy c·∫≠p.'
    });
  }
});

module.exports = router;