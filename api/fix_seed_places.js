const fs = require('fs');

// ƒê·ªçc file JSON g·ªëc
const jsonData = JSON.parse(fs.readFileSync('../an-gi-o-dau.places.json', 'utf8'));

// D·ªØ li·ªáu places g·ªëc (6 places ƒë·∫ßu ti√™n)
const originalPlaces = [
  {
    name: 'Nh√† H√†ng Sen V√†ng H√≤a L·∫°c',
    category: 'restaurant',
    subcategory: 'M√≥n Vi·ªát',
    description: 'Nh√† h√†ng chuy√™n c√°c m√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam, kh√¥ng gian r·ªông r√£i, tho√°ng ƒë√£ng. L√Ω t∆∞·ªüng cho c√°c bu·ªïi ti·ªác gia ƒë√¨nh v√† h·ªôi h·ªçp.',
    location: { type: 'Point', coordinates: [105.534444, 20.970833] },
    address: { street: 'G·∫ßn C·∫ßu Vai R√©o', ward: 'Ph√∫ C√°t', district: 'Qu·ªëc Oai', city: 'H√† N·ªôi' },
    pricing: { minPrice: 150000, maxPrice: 500000, currency: 'VND' },
    tags: ['m√≥n vi·ªát', 'gia ƒë√¨nh', 'r·ªông r√£i'],
    images: [{ url: '/vietnamese-bun-bo-hue-restaurant.png', alt: 'Kh√¥ng gian nh√† h√†ng Sen V√†ng' }]
  },
  {
    name: 'Twitter Beans Coffee - KCNC H√≤a L·∫°c',
    category: 'cafe',
    subcategory: 'C√† ph√™ l√†m vi·ªác',
    description: 'Kh√¥ng gian y√™n tƒ©nh, hi·ªán ƒë·∫°i, ph√π h·ª£p cho vi·ªác h·ªçc t·∫≠p v√† l√†m vi·ªác. Cung c·∫•p nhi·ªÅu lo·∫°i ƒë·ªì u·ªëng v√† ƒë·ªì ƒÉn nh·∫π.',
    location: { type: 'Point', coordinates: [105.50997, 21.01779] },
    address: { street: 'Khu C√¥ng ngh·ªá cao H√≤a L·∫°c', ward: 'T√¢n X√£', district: 'Th·∫°ch Th·∫•t', city: 'H√† N·ªôi' },
    pricing: { minPrice: 40000, maxPrice: 80000, currency: 'VND' },
    tags: ['y√™n tƒ©nh', 'l√†m vi·ªác', 'hi·ªán ƒë·∫°i'],
    images: [{ url: '/modern-study-cafe-with-students.png', alt: 'Qu·∫ßy pha ch·∫ø c·ªßa Twitter Beans Coffee' }]
  },
  {
    name: '1988 BBQ H√≤a L·∫°c',
    category: 'restaurant',
    subcategory: 'N∆∞·ªõng',
    description: 'Qu√°n n∆∞·ªõng n·ªïi ti·∫øng v·ªõi sinh vi√™n, gi√° c·∫£ ph·∫£i chƒÉng, th·ª±c ƒë∆°n ƒëa d·∫°ng c√°c m√≥n n∆∞·ªõng v√† l·∫©u.',
    location: { type: 'Point', coordinates: [105.5205, 21.0226] },
    address: { street: 'QL21A', ward: 'Th·∫°ch Ho√†', district: 'Th·∫°ch Th·∫•t', city: 'H√† N·ªôi' },
    pricing: { minPrice: 100000, maxPrice: 300000, currency: 'VND' },
    tags: ['bbq', 'sinh vi√™n', 'gi√° r·∫ª'],
    images: [{ url: 'https://toplist.vn/images/800px/the-hill-bbq-restaurant-879488.jpg', alt: 'M√≥n n∆∞·ªõng t·∫°i 1988 BBQ' }]
  },
  {
    name: 'Bay Coffee H√≤a L·∫°c',
    category: 'cafe',
    subcategory: 'C√† ph√™ th∆∞·ªùng',
    description: 'Qu√°n c√† ph√™ b√¨nh d√¢n v·ªõi gi√° c·∫£ ph·∫£i chƒÉng, ph√π h·ª£p cho sinh vi√™n v√† ng∆∞·ªùi d√¢n ƒë·ªãa ph∆∞∆°ng.',
    location: { type: 'Point', coordinates: [105.5195, 21.0067] },
    address: { street: 'ƒê∆∞·ªùng m·∫´u 4', ward: 'Ph∆∞·ªùng m·∫´u 4', district: 'Qu·∫≠n m·∫´u 4', city: 'H√† N·ªôi' },
    pricing: { minPrice: 20000, maxPrice: 50000, currency: 'VND' },
    tags: ['cafe', 'gi√° r·∫ª'],
    images: [{ url: 'https://lh3.googleusercontent.com/p/AF1QipOSceyAMDJZNQNzyeN10brPvp8HCnx5nhnrYJt1=w408-h306-k-no', alt: 'H√¨nh ·∫£nh Bay Coffee H√≤a L·∫°c' }]
  },
  {
    name: 'B√°nh cu·ªën, b√∫n ch·∫£ A Ho√†ng',
    category: 'restaurant',
    subcategory: 'M√≥n Vi·ªát',
    description: 'Qu√°n ƒÉn chuy√™n b√°nh cu·ªën v√† b√∫n ch·∫£.',
    location: { type: 'Point', coordinates: [105.5195699870118, 21.006668817250116] },
    address: { street: 'ƒê∆∞·ªùng m·∫´u 5', ward: 'Ph∆∞·ªùng m·∫´u 5', district: 'Qu·∫≠n m·∫´u 5', city: 'H√† N·ªôi' },
    pricing: { minPrice: 30000, maxPrice: 80000, currency: 'VND' },
    tags: ['restaurant', 'b√∫n ch·∫£'],
    images: [{ url: 'https://lh3.googleusercontent.com/p/AF1QipOSceyAMDJZNQNzyeN10brPvp8HCnx5nhnrYJt1=w408-h306-k-no', alt: 'H√¨nh ·∫£nh b√°nh cu·ªën, b√∫n ch·∫£ A Ho√†ng' }]
  },
  {
    name: 'L·∫©u n·∫•m Ashima',
    category: 'restaurant',
    subcategory: 'L·∫©u',
    description: 'Nh√† h√†ng chuy√™n c√°c m√≥n l·∫©u n·∫•m, kh√¥ng gian ·∫•m c√∫ng, ph√π h·ª£p cho nh√≥m b·∫°n.',
    location: { type: 'Point', coordinates: [105.5205, 21.0226] },
    address: { street: 'QL21A', ward: 'Th·∫°ch Ho√†', district: 'Th·∫°ch Th·∫•t', city: 'H√† N·ªôi' },
    pricing: { minPrice: 120000, maxPrice: 250000, currency: 'VND' },
    tags: ['l·∫©u', 'nh√≥m b·∫°n'],
    images: [{ url: 'https://toplist.vn/images/800px/the-hill-bbq-restaurant-879488.jpg', alt: 'M√≥n l·∫©u n·∫•m t·∫°i Ashima' }]
  },
  {
    name: 'Ph·ªü L√Ω Qu·ªëc S∆∞ - H√≤a L·∫°c',
    category: 'restaurant',
    subcategory: 'Ph·ªü',
    description: 'Qu√°n ph·ªü truy·ªÅn th·ªëng v·ªõi h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†, ph·ª•c v·ª• t·ª´ s√°ng s·ªõm.',
    location: { type: 'Point', coordinates: [105.5195, 21.0067] },
    address: { street: 'ƒê∆∞·ªùng m·∫´u 6', ward: 'Ph∆∞·ªùng m·∫´u 6', district: 'Qu·∫≠n m·∫´u 6', city: 'H√† N·ªôi' },
    pricing: { minPrice: 35000, maxPrice: 60000, currency: 'VND' },
    tags: ['ph·ªü', 's√°ng s·ªõm'],
    images: [{ url: 'https://lh3.googleusercontent.com/p/AF1QipOSceyAMDJZNQNzyeN10brPvp8HCnx5nhnrYJt1=w408-h306-k-no', alt: 'T√¥ ph·ªü t·∫°i L√Ω Qu·ªëc S∆∞' }]
  }
];

// Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ JSON
function convertPlace(place) {
  const categoryMap = {
    'ƒÇn u·ªëng': 'restaurant',
    'C√† ph√™': 'cafe',
    'Gi·∫£i tr√≠': 'entertainment',
    'H·ªçc t·∫≠p': 'study',
    'L∆∞u tr√∫': 'accommodation'
  };

  return {
    name: place.name,
    category: categoryMap[place.category] || 'restaurant',
    subcategory: place.subcategory || 'Kh√°c',
    description: place.description || `M√¥ t·∫£ cho ${place.name}`,
    location: {
      type: 'Point',
      coordinates: place.location.coordinates
    },
    address: {
      street: place.address.street || 'Kh√¥ng r√µ t√™n ƒë∆∞·ªùng',
      ward: place.address.ward || 'Kh√¥ng r√µ ph∆∞·ªùng/x√£',
      district: place.address.district,
      city: place.address.city
    },
    pricing: {
      minPrice: place.pricing.minPrice,
      maxPrice: place.pricing.maxPrice,
      currency: place.pricing.currency
    },
    tags: place.tags || [categoryMap[place.category] || 'restaurant'],
    images: place.images && place.images.length > 0 ? [{
      url: place.images[0].url,
      alt: `H√¨nh ·∫£nh ${place.name}`
    }] : [{
      url: 'https://via.placeholder.com/400x300',
      alt: `H√¨nh ·∫£nh ${place.name}`
    }]
  };
}

// Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ places t·ª´ JSON
const convertedPlaces = jsonData.map(convertPlace);

// K·∫øt h·ª£p places g·ªëc v√† places m·ªõi
const allPlaces = [...originalPlaces, ...convertedPlaces];

// T·∫°o n·ªôi dung file m·ªõi
const fileContent = `// api/seed_places.js
const mongoose = require('mongoose');
const Place = require('./models/Place');
const User = require('./models/User');
require('dotenv').config(); // Make sure to use the .env file

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  console.error('FATAL ERROR: MONGODB_URI is not defined in your .env file.');
  process.exit(1);
}

const samplePlaces = ${JSON.stringify(allPlaces, null, 2)};

const seedDB = async () => {
  try {
    console.log('Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    console.log('Finding a user to be the author...');
    const author = await User.findOne();
    if (!author) {
      throw new Error('Database is empty or no users found. Please register at least one user before seeding places.');
    }
    console.log(\`‚úÖ Found user: \${author.name}. All new places will be created by this user.\`);

    console.log('Starting to seed places...');
    for (const placeData of samplePlaces) {
      const existingPlace = await Place.findOne({ name: placeData.name });
      if (existingPlace) {
        console.log(\`- Place "\${placeData.name}" already exists. Skipping.\`);
      } else {
        const place = new Place({
          ...placeData,
          createdBy: author._id,
          isVerified: true,
          isActive: true,
        });
        await place.save();
        console.log(\`+ Added place: "\${place.name}"\`);
      }
    }

    console.log('‚úÖ Database seeding completed successfully!');

  } catch (error) {
    console.error('‚ùå Error seeding database:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('Disconnected from MongoDB.');
  }
};

seedDB();
`;

// Ghi file m·ªõi
fs.writeFileSync('./seed_places.js', fileContent, 'utf8');

console.log('‚úÖ ƒê√£ t·∫°o l·∫°i file seed_places.js th√†nh c√¥ng!');
console.log(`üìä T·ªïng s·ªë places: ${allPlaces.length} (${originalPlaces.length} g·ªëc + ${convertedPlaces.length} m·ªõi)`);