const { GoogleGenerativeAI } = require('@google/generative-ai');
const AISuggestion = require('../models/AISuggestion');
const crypto = require('crypto');

class AIService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.genAI = this.apiKey ? new GoogleGenerativeAI(this.apiKey) : null;
  }

  // T·∫°o hash key cho cache
  createCacheKey(data) {
    const dataString = JSON.stringify(data);
    return crypto.createHash('md5').update(dataString).digest('hex');
  }

  async generateItinerarySuggestions(destination, duration, budget, preferences, userId = null) {
    try {
      // T·∫°o cache key t·ª´ input data
      const inputData = { 
        destination, 
        duration, 
        budget, 
        preferences: Array.isArray(preferences) ? preferences.join(', ') : preferences 
      };
      const cacheKey = this.createCacheKey(inputData);
      
      // Ki·ªÉm tra cache trong MongoDB Atlas
      console.log('üîç Checking cache for itinerary suggestion...');
      const cachedSuggestion = await AISuggestion.findCachedSuggestion('itinerary', cacheKey);
      
      if (cachedSuggestion) {
        console.log('‚úÖ Found cached itinerary suggestion');
        await cachedSuggestion.updateUsage();
        return cachedSuggestion.aiResponse;
      }

      console.log('üÜï Generating new itinerary suggestion...');
      
      // N·∫øu kh√¥ng c√≥ API key, tr·∫£ v·ªÅ mock data
      if (!this.apiKey || this.apiKey === 'undefined') {
        console.log('ü§ñ Using mock AI data (no API key)');
        const mockResponse = {
          title: `L·ªãch tr√¨nh ${destination} - ${duration} ng√†y`,
          description: `Kh√°m ph√° ${destination} trong ${duration} ng√†y v·ªõi ng√¢n s√°ch ${budget.toLocaleString()} VND`,
          content: `
**Ng√†y 1:**
- 08:00 - 10:00: Tham quan trung t√¢m th√†nh ph·ªë
- 10:30 - 12:00: Kh√°m ph√° c√°c ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng  
- 12:00 - 13:30: ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng
- 14:00 - 16:00: Tham quan b·∫£o t√†ng
- 16:30 - 18:00: D·∫°o ph·ªë v√† ch·ª•p ·∫£nh
- 19:00: Th∆∞·ªüng th·ª©c ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng

**Ng√†y 2:**
- 08:30 - 10:30: Tham quan di t√≠ch l·ªãch s·ª≠
- 11:00 - 12:30: Mua s·∫Øm t·∫°i ch·ª£ ƒë·ªãa ph∆∞∆°ng
- 12:30 - 14:00: ƒÇn tr∆∞a v√† ngh·ªâ ng∆°i
- 14:30 - 17:00: Kh√°m ph√° khu v·ª±c xung quanh
- 17:30 - 19:00: D·∫°o ph·ªë bu·ªïi chi·ªÅu
- 19:30: ƒÇn t·ªëi v√† k·∫øt th√∫c chuy·∫øn ƒëi

**Chi ph√≠ ∆∞·ªõc t√≠nh:**
- ƒÇn u·ªëng: ${Math.round(budget * 0.4).toLocaleString()} VND
- Di chuy·ªÉn: ${Math.round(budget * 0.3).toLocaleString()} VND
- Tham quan: ${Math.round(budget * 0.3).toLocaleString()} VND
          `,
          totalEstimatedCost: budget,
          tips: [
            'Mang theo gi·∫•y t·ªù t√πy th√¢n',
            'Ki·ªÉm tra th·ªùi ti·∫øt tr∆∞·ªõc khi ƒëi',
            'Chu·∫©n b·ªã ti·ªÅn m·∫∑t cho c√°c chi ph√≠ nh·ªè',
            'T√¨m hi·ªÉu vƒÉn h√≥a ƒë·ªãa ph∆∞∆°ng'
          ]
        };
        
        // L∆∞u mock data v√†o MongoDB Atlas
        await AISuggestion.createOrUpdateSuggestion({
          requestType: 'itinerary',
          inputHash: cacheKey,
          inputData,
          aiResponse: mockResponse,
          userId
        });
        
        return mockResponse;
      }

      const prompt = `T·∫°o m·ªôt l·ªãch tr√¨nh du l·ªãch chi ti·∫øt cho ${destination} trong ${duration} ng√†y v·ªõi ng√¢n s√°ch ${budget} VND. 
      S·ªü th√≠ch: ${preferences || 'Kh√¥ng c√≥ s·ªü th√≠ch ƒë·∫∑c bi·ªát'}.
      
      QUAN TR·ªåNG: Content ph·∫£i c√≥ format timeline v·ªõi th·ªùi gian c·ª• th·ªÉ ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp tr√™n giao di·ªán. 
      S·ª≠ d·ª•ng format sau cho m·ªói ho·∫°t ƒë·ªông:
      - "HH:MM - HH:MM: T√™n ho·∫°t ƒë·ªông t·∫°i ƒê·ªãa ƒëi·ªÉm"
      - "HH:MM: Ho·∫°t ƒë·ªông ng·∫Øn"
      
      V√≠ d·ª• format:
      **Ng√†y 1:**
      - 08:00 - 10:00: Tham quan Ch√πa M·ªôt C·ªôt
      - 10:30 - 12:00: Kh√°m ph√° Ph·ªë c·ªï H√† N·ªôi
      - 12:00 - 13:30: ƒÇn tr∆∞a t·∫°i Qu√°n Ph·ªü Th√¨n
      - 14:00 - 16:00: Tham quan VƒÉn Mi·∫øu
      - 16:30 - 18:00: D·∫°o quanh H·ªì Ho√†n Ki·∫øm
      - 19:00: ƒÇn t·ªëi v√† ngh·ªâ ng∆°i
      
      Tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c sau:
      {
        "title": "Ti√™u ƒë·ªÅ l·ªãch tr√¨nh",
        "description": "M√¥ t·∫£ ng·∫Øn g·ªçn",
        "content": "N·ªôi dung chi ti·∫øt theo t·ª´ng ng√†y v·ªõi timeline c·ª• th·ªÉ (markdown format)",
        "totalEstimatedCost": s·ªë ti·ªÅn ∆∞·ªõc t√≠nh,
        "tips": ["m·∫πo 1", "m·∫πo 2", "m·∫πo 3"]
      }`;

      const model = this.genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
      
      // Retry logic for API overload
      let result;
      let retryCount = 0;
      const maxRetries = 3;
      const retryDelay = 2000; // 2 seconds
      
      while (retryCount < maxRetries) {
        try {
          result = await model.generateContent(prompt);
          break; // Success, exit retry loop
        } catch (apiError) {
          retryCount++;
          console.log(`üîÑ Gemini API attempt ${retryCount}/${maxRetries} failed:`, apiError.message);
          
          if (apiError.message.includes('overloaded') || apiError.message.includes('503')) {
            if (retryCount < maxRetries) {
              console.log(`‚è≥ Waiting ${retryDelay}ms before retry...`);
              await new Promise(resolve => setTimeout(resolve, retryDelay));
              continue;
            }
          }
          throw apiError; // Re-throw if not overload error or max retries reached
        }
      }
      
      const aiResponse = result.response.text();
      
      let finalResponse;
      
      // Th·ª≠ parse JSON t·ª´ response
      try {
        // T√¨m JSON block ƒë·∫ßu ti√™n v√† cu·ªëi c√πng
        let jsonText = aiResponse;
        
        // N·∫øu c√≥ ```json ho·∫∑c ``` wrapper, extract n·ªôi dung
        const codeBlockMatch = aiResponse.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
        if (codeBlockMatch) {
          jsonText = codeBlockMatch[1];
        } else {
          // T√¨m JSON object ƒë·∫ßu ti√™n
          const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            jsonText = jsonMatch[0];
          }
        }
        
        // Clean up common JSON issues
        jsonText = jsonText
          .replace(/,\s*}/g, '}')  // Remove trailing commas
          .replace(/,\s*]/g, ']')  // Remove trailing commas in arrays
          .trim();
        
        finalResponse = JSON.parse(jsonText);
        
        // Validate required fields
        if (!finalResponse.title || !finalResponse.content) {
          throw new Error('Missing required fields in AI response');
        }
        
      } catch (parseError) {
        console.log('Kh√¥ng th·ªÉ parse JSON, tr·∫£ v·ªÅ text thu·∫ßn:', parseError.message);
        console.log('Raw AI response:', aiResponse.substring(0, 500) + '...');
        
        // N·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON, tr·∫£ v·ªÅ format ƒë∆°n gi·∫£n v·ªõi timeline mock
        finalResponse = {
          title: `L·ªãch tr√¨nh ${destination} - ${duration} ng√†y`,
          description: `Kh√°m ph√° ${destination} trong ${duration} ng√†y v·ªõi ng√¢n s√°ch ${budget.toLocaleString()} VND`,
          content: `
**Ng√†y 1:**
- 08:00 - 10:00: Tham quan trung t√¢m ${destination}
- 10:30 - 12:00: Kh√°m ph√° c√°c ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng  
- 12:00 - 13:30: ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng
- 14:00 - 16:00: Tham quan b·∫£o t√†ng
- 16:30 - 18:00: D·∫°o ph·ªë v√† ch·ª•p ·∫£nh
- 19:00: Th∆∞·ªüng th·ª©c ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng

**Chi ph√≠ ∆∞·ªõc t√≠nh:**
- ƒÇn u·ªëng: ${Math.round(budget * 0.4).toLocaleString()} VND
- Di chuy·ªÉn: ${Math.round(budget * 0.3).toLocaleString()} VND
- Tham quan: ${Math.round(budget * 0.3).toLocaleString()} VND
          `,
          totalEstimatedCost: budget,
          tips: ['Mang theo gi·∫•y t·ªù t√πy th√¢n', 'Ki·ªÉm tra th·ªùi ti·∫øt tr∆∞·ªõc khi ƒëi']
        };
      }

      // L∆∞u k·∫øt qu·∫£ v√†o MongoDB Atlas
      console.log('üíæ Saving AI response to MongoDB Atlas...');
      await AISuggestion.createOrUpdateSuggestion({
        requestType: 'itinerary',
        inputHash: cacheKey,
        inputData,
        aiResponse: finalResponse,
        userId
      });

      return finalResponse;

    } catch (error) {
      console.error('L·ªói g·ªçi API Gemini:', error.message);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω l·ªãch tr√¨nh. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }

  async generatePlaceSuggestions(query, userId = null) {
    try {
      // T·∫°o cache key t·ª´ input data
      const inputData = { query };
      const cacheKey = this.createCacheKey(inputData);
      
      // Ki·ªÉm tra cache trong MongoDB Atlas
      console.log('üîç Checking cache for place suggestion...');
      const cachedSuggestion = await AISuggestion.findCachedSuggestion('place', cacheKey);
      
      if (cachedSuggestion) {
        console.log('‚úÖ Found cached place suggestion');
        await cachedSuggestion.updateUsage();
        return cachedSuggestion.aiResponse;
      }

      console.log('üÜï Generating new place suggestion...');
      
      // N·∫øu kh√¥ng c√≥ API key, tr·∫£ v·ªÅ mock data
      if (!this.apiKey) {
        console.log('ü§ñ Using mock AI data for places (no API key)');
        const mockResponse = {
          suggestions: [
            {
              name: `ƒê·ªãa ƒëi·ªÉm n·ªïi ti·∫øng t·∫°i ${query}`,
              location: query,
              description: `M·ªôt trong nh·ªØng ƒëi·ªÉm ƒë·∫øn h·∫•p d·∫´n nh·∫•t khi t√¨m ki·∫øm v·ªÅ ${query}`,
              highlights: [
                "Ki·∫øn tr√∫c ƒë·ªôc ƒë√°o",
                "Phong c·∫£nh ƒë·∫πp",
                "·∫®m th·ª±c ƒë·ªãa ph∆∞∆°ng"
              ],
              bestTime: "Quanh nƒÉm",
              estimatedCost: "500,000 - 1,000,000 VND"
            },
            {
              name: `Khu v·ª±c vƒÉn h√≥a ${query}`,
              location: query,
              description: `N∆°i l∆∞u gi·ªØ nh·ªØng n√©t vƒÉn h√≥a truy·ªÅn th·ªëng c·ªßa ${query}`,
              highlights: [
                "L·ªãch s·ª≠ phong ph√∫",
                "Tr·∫£i nghi·ªám vƒÉn h√≥a",
                "Ch·ª•p ·∫£nh ƒë·∫πp"
              ],
              bestTime: "S√°ng s·ªõm ho·∫∑c chi·ªÅu m√°t",
              estimatedCost: "200,000 - 500,000 VND"
            }
          ]
        };
        
        // L∆∞u mock data v√†o MongoDB Atlas
        try {
          await AISuggestion.createOrUpdateSuggestion({
            requestType: 'place',
            inputHash: cacheKey,
            inputData,
            aiResponse: mockResponse,
            userId
          });
        } catch (cacheError) {
          console.log('‚ö†Ô∏è Warning: Could not save to cache:', cacheError.message);
        }
        
        return mockResponse;
      }

      const prompt = `G·ª£i √Ω 5 ƒë·ªãa ƒëi·ªÉm du l·ªãch t·∫°i Vi·ªát Nam ph√π h·ª£p v·ªõi: "${query}"

H√£y ƒë∆∞a ra danh s√°ch c√°c ƒë·ªãa ƒëi·ªÉm v·ªõi th√¥ng tin:
1. T√™n ƒë·ªãa ƒëi·ªÉm
2. M√¥ t·∫£ ng·∫Øn
3. Lo·∫°i h√¨nh du l·ªãch
4. V·ªã tr√≠
5. Th·ªùi gian tham quan g·ª£i √Ω

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† ƒë·ªãnh d·∫°ng JSON v·ªõi c·∫•u tr√∫c:
{
  "suggestions": [
    {
      "name": "T√™n ƒë·ªãa ƒëi·ªÉm",
      "description": "M√¥ t·∫£",
      "type": "Lo·∫°i h√¨nh",
      "location": "V·ªã tr√≠",
      "duration": "Th·ªùi gian g·ª£i √Ω",
      "highlights": ["ƒêi·ªÉm n·ªïi b·∫≠t 1", "ƒêi·ªÉm n·ªïi b·∫≠t 2"]
    }
  ]
}`;

      const model = this.genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
      
      // Retry logic for API overload
      let result;
      let retryCount = 0;
      const maxRetries = 3;
      const retryDelay = 2000; // 2 seconds
      
      while (retryCount < maxRetries) {
        try {
          result = await model.generateContent(`B·∫°n l√† m·ªôt chuy√™n gia du l·ªãch Vi·ªát Nam, gi√∫p g·ª£i √Ω c√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch ph√π h·ª£p.\n\n${prompt}`);
          break; // Success, exit retry loop
        } catch (apiError) {
          retryCount++;
          console.log(`üîÑ Gemini API attempt ${retryCount}/${maxRetries} failed:`, apiError.message);
          
          if (apiError.message.includes('overloaded') || apiError.message.includes('503')) {
            if (retryCount < maxRetries) {
              console.log(`‚è≥ Waiting ${retryDelay}ms before retry...`);
              await new Promise(resolve => setTimeout(resolve, retryDelay));
              continue;
            }
          }
          throw apiError; // Re-throw if not overload error or max retries reached
        }
      }
      
      const aiResponse = result.response.text();
      
      let finalResponse;
      
      try {
        const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          finalResponse = JSON.parse(jsonMatch[0]);
        }
      } catch (parseError) {
        console.log('Kh√¥ng th·ªÉ parse JSON:', parseError);
        finalResponse = {
          suggestions: [{
            name: 'G·ª£i √Ω t·ª´ AI',
            location: 'Vi·ªát Nam',
            description: aiResponse,
            highlights: [],
            bestTime: 'Quanh nƒÉm',
            estimatedCost: 'Li√™n h·ªá'
          }]
        };
      }

      // L∆∞u k·∫øt qu·∫£ v√†o MongoDB Atlas
      console.log('üíæ Saving place suggestion to MongoDB Atlas...');
      try {
        await AISuggestion.createOrUpdateSuggestion({
          requestType: 'place',
          inputHash: cacheKey,
          inputData,
          aiResponse: finalResponse,
          userId
        });
      } catch (cacheError) {
        console.log('‚ö†Ô∏è Warning: Could not save to cache:', cacheError.message);
      }

      return finalResponse;

    } catch (error) {
      console.error('L·ªói g·ªçi API Gemini:', error.message);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o g·ª£i √Ω ƒë·ªãa ƒëi·ªÉm. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
}

module.exports = new AIService();