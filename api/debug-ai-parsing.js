// Debug script ƒë·ªÉ ki·ªÉm tra AI content v√† parsing
const axios = require('axios');

// Function parseAiContentToTimeline (copy t·ª´ frontend)
function parseAiContentToTimeline(aiContent) {
  if (!aiContent) return [];
  
  try {
    const lines = aiContent.split('\n');
    const days = [];
    let currentDay = null;
    let currentActivity = null;
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (!trimmedLine) continue;
      
      // Detect day headers (e.g., "Ng√†y 1:", "Day 1:", etc.)
      const dayMatch = trimmedLine.match(/^(Ng√†y|Day)\s*(\d+)[:Ôºö]/i);
      if (dayMatch) {
        if (currentDay) {
          days.push(currentDay);
        }
        currentDay = {
          day: trimmedLine,
          activities: []
        };
        continue;
      }
      
      // Detect time patterns (e.g., "08:00 - 09:00", "8:00-9:00", etc.)
      const timeMatch = trimmedLine.match(/^(\d{1,2}):?(\d{0,2})\s*[-‚Äì‚Äî]\s*(\d{1,2}):?(\d{0,2})/);
      if (timeMatch && currentDay) {
        if (currentActivity) {
          currentDay.activities.push(currentActivity);
        }
        
        const startHour = timeMatch[1].padStart(2, '0');
        const startMin = timeMatch[2] || '00';
        const endHour = timeMatch[3].padStart(2, '0');
        const endMin = timeMatch[4] || '00';
        
        currentActivity = {
          time: trimmedLine,
          startTime: `${startHour}:${startMin}`,
          endTime: `${endHour}:${endMin}`,
          description: '',
          type: 'general'
        };
        continue;
      }
      
      // Add description to current activity
      if (currentActivity && trimmedLine) {
        if (currentActivity.description) {
          currentActivity.description += ' ' + trimmedLine;
        } else {
          currentActivity.description = trimmedLine;
        }
      }
    }
    
    // Add last activity and day
    if (currentActivity && currentDay) {
      currentDay.activities.push(currentActivity);
    }
    if (currentDay) {
      days.push(currentDay);
    }
    
    return days;
  } catch (error) {
    console.error('Error parsing AI content:', error);
    return [];
  }
}

async function debugAiParsing() {
  try {
    console.log('üîç Debugging AI content parsing...');
    
    // Th·ª≠ c√°c th√¥ng tin ƒëƒÉng nh·∫≠p kh√°c nhau
    let token;
    const loginAttempts = [
       { email: 'ngoquocan712@gmail.com', password: '123456' },
       { email: 'ngoquocan712@gmail.com', password: 'password123' },
       { email: 'admin@example.com', password: 'admin123' },
       { email: 'test@example.com', password: 'password123' }
     ];
    
    for (const credentials of loginAttempts) {
      try {
        console.log(`üîê Trying login with: ${credentials.email}`);
        const loginResponse = await axios.post('http://localhost:5000/api/auth/login', credentials);
        token = loginResponse.data.data.token;
        console.log(`‚úÖ Login successful with: ${credentials.email}`);
        break;
      } catch (error) {
        console.log(`‚ùå Login failed with: ${credentials.email}`);
      }
    }
    
    if (!token) {
       console.log('‚ùå All login attempts failed');
       return;
     }
    
    // L·∫•y t·∫•t c·∫£ l·ªãch tr√¨nh c·ªßa user hi·ªán t·∫°i
     console.log('üìã Fetching all itineraries...');
     
     const allItinerariesResponse = await axios.get('http://localhost:5000/api/itineraries', {
       headers: { Authorization: `Bearer ${token}` }
     });
     
     const allItineraries = allItinerariesResponse.data.data.itineraries;
     console.log(`üìä Found ${allItineraries.length} itineraries`);
     
     // T√¨m l·ªãch tr√¨nh AI
     const aiItinerary = allItineraries.find(it => it.isAiGenerated === true);
     
     if (!aiItinerary) {
       console.log('‚ùå No AI-generated itinerary found');
       console.log('üìã Available itineraries:');
       allItineraries.forEach((it, index) => {
         console.log(`  ${index + 1}. ${it.title} (ID: ${it._id}, isAiGenerated: ${it.isAiGenerated})`);
       });
       
       console.log('\nüîß Creating a new AI itinerary for testing...');
       const createResponse = await axios.post('http://localhost:5000/api/itineraries', {
         title: 'Test AI Itinerary - H√≤a L·∫°c 1 ng√†y',
         destination: 'H√≤a L·∫°c',
         startDate: '2025-01-31',
         endDate: '2025-01-31',
         isAiGenerated: true,
         aiContent: `Ng√†y 1: Kh√°m ph√° H√≤a L·∫°c

08:00 - 09:00: Kh·ªüi h√†nh t·ª´ H√† N·ªôi
Xu·∫•t ph√°t t·ª´ trung t√¢m H√† N·ªôi, di chuy·ªÉn b·∫±ng xe m√°y ho·∫∑c √¥ t√¥ ƒë·∫øn H√≤a L·∫°c. Qu√£ng ƒë∆∞·ªùng kho·∫£ng 30km, m·∫•t kho·∫£ng 1 ti·∫øng.

09:00 - 10:30: Tham quan Khu c√¥ng ngh·ªá cao H√≤a L·∫°c
Kh√°m ph√° khu v·ª±c c√¥ng ngh·ªá cao, t√¨m hi·ªÉu v·ªÅ c√°c d·ª± √°n ph√°t tri·ªÉn v√† ki·∫øn tr√∫c hi·ªán ƒë·∫°i.

10:30 - 12:00: ThƒÉm quan ƒê·∫°i h·ªçc FPT
Tham quan campus ƒë·∫°i h·ªçc v·ªõi ki·∫øn tr√∫c ƒë·∫πp v√† m√¥i tr∆∞·ªùng h·ªçc t·∫≠p hi·ªán ƒë·∫°i.

12:00 - 13:30: ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng
Th∆∞·ªüng th·ª©c c√°c m√≥n ƒÉn ƒë·∫∑c s·∫£n v√πng ngo·∫°i th√†nh H√† N·ªôi.

13:30 - 15:00: Tham quan l√†ng ngh·ªÅ truy·ªÅn th·ªëng
Kh√°m ph√° c√°c l√†ng ngh·ªÅ g·∫ßn ƒë√≥ nh∆∞ l√†ng g·ªëm, l√†ng d·ªát.

15:00 - 16:30: Th∆∞ gi√£n t·∫°i c√¥ng vi√™n
Ngh·ªâ ng∆°i v√† th∆∞ gi√£n t·∫°i c√°c khu v·ª±c xanh trong khu v·ª±c.

16:30 - 18:00: Tr·ªü v·ªÅ H√† N·ªôi
K·∫øt th√∫c chuy·∫øn ƒëi v√† tr·ªü v·ªÅ trung t√¢m th√†nh ph·ªë.`
       }, {
         headers: { Authorization: `Bearer ${token}` }
       });
       
       console.log('‚úÖ Created new AI itinerary:', createResponse.data.data.title);
        var itinerary = createResponse.data.data;
      } else {
        console.log(`‚úÖ Found AI itinerary: ${aiItinerary.title} (ID: ${aiItinerary._id})`);
        var itinerary = aiItinerary;
      }
    console.log('\nüìä ITINERARY INFO:');
    console.log('- ID:', itinerary._id);
    console.log('- Title:', itinerary.title);
    console.log('- isAiGenerated:', itinerary.isAiGenerated);
    console.log('- Has aiContent:', !!itinerary.aiContent);
    console.log('- aiContent length:', itinerary.aiContent?.length || 0);
    
    if (itinerary.aiContent) {
      console.log('\nüìù AI CONTENT PREVIEW (first 500 chars):');
      console.log(itinerary.aiContent.substring(0, 500));
      console.log('\n...\n');
      
      console.log('üìù AI CONTENT PREVIEW (last 500 chars):');
      console.log(itinerary.aiContent.substring(itinerary.aiContent.length - 500));
      
      console.log('\nüîß PARSING RESULT:');
      const timeline = parseAiContentToTimeline(itinerary.aiContent);
      console.log('- Days found:', timeline.length);
      
      timeline.forEach((day, index) => {
        console.log(`\nDay ${index + 1}: ${day.day}`);
        console.log(`- Activities: ${day.activities.length}`);
        day.activities.forEach((activity, actIndex) => {
          console.log(`  ${actIndex + 1}. ${activity.time} - ${activity.description.substring(0, 100)}...`);
        });
      });
      
      if (timeline.length === 0) {
        console.log('\n‚ùå PARSING FAILED - No timeline generated');
        console.log('üîç Analyzing content structure...');
        
        const lines = itinerary.aiContent.split('\n');
        console.log(`- Total lines: ${lines.length}`);
        console.log('- First 10 lines:');
        lines.slice(0, 10).forEach((line, index) => {
          console.log(`  ${index + 1}: "${line.trim()}"`);
        });
      }
    } else {
      console.log('‚ùå No AI content found');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
  }
}

debugAiParsing();