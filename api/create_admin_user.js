const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('./models/User');
require('dotenv').config();

async function createAdminUser() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    // Ki·ªÉm tra xem admin ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingAdmin = await User.findOne({ email: 'admin@example.com' });
    
    if (existingAdmin) {
      console.log('‚úÖ Admin user ƒë√£ t·ªìn t·∫°i');
      console.log(`   - Email: ${existingAdmin.email}`);
      console.log(`   - Role: ${existingAdmin.role}`);
      console.log(`   - Name: ${existingAdmin.name}`);
    } else {
      // T·∫°o admin user m·ªõi
      const hashedPassword = await bcrypt.hash('admin123', 12);
      
      const adminUser = new User({
        name: 'Admin User',
        email: 'admin@example.com',
        password: hashedPassword,
        role: 'admin',
    
        isEmailVerified: true
      });

      await adminUser.save();
      console.log('‚úÖ ƒê√£ t·∫°o admin user th√†nh c√¥ng');
      console.log(`   - Email: ${adminUser.email}`);
      console.log(`   - Password: admin123`);
      console.log(`   - Role: ${adminUser.role}`);
    }

    // Ki·ªÉm tra t·∫•t c·∫£ admin users
    const allAdmins = await User.find({ role: 'admin' });
    console.log(`\nüìä T·ªïng s·ªë admin users: ${allAdmins.length}`);
    allAdmins.forEach((admin, index) => {
      console.log(`${index + 1}. ${admin.name} (${admin.email})`);
    });

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

createAdminUser();