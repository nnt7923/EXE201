const mongoose = require('mongoose');
const User = require('./models/User');
const bcrypt = require('bcryptjs');

// K·∫øt n·ªëi MongoDB
mongoose.connect('mongodb://localhost:27017/an-gi-o-dau', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

async function checkUserInfo() {
  try {
    console.log('‚úÖ Connected to MongoDB');

    // T√¨m user
    const user = await User.findOne({ email: 'truongnn23790@gmail.com' });
    if (!user) {
      console.log('‚ùå User not found');
      return;
    }

    console.log('üë§ User found:');
    console.log('- Email:', user.email);
    console.log('- Name:', user.name);
    console.log('- Password hash exists:', !!user.password);
    console.log('- Password hash length:', user.password?.length);

    // Th·ª≠ m·ªôt s·ªë m·∫≠t kh·∫©u ph·ªï bi·∫øn
    const commonPasswords = ['123456', 'password123', '1234567', 'admin123', 'truong123'];
    
    console.log('\nüîç Testing common passwords:');
    for (const password of commonPasswords) {
      try {
        const isMatch = await bcrypt.compare(password, user.password);
        console.log(`- ${password}: ${isMatch ? '‚úÖ MATCH' : '‚ùå No match'}`);
        if (isMatch) {
          console.log(`\nüéâ Found correct password: ${password}`);
          break;
        }
      } catch (error) {
        console.log(`- ${password}: ‚ùå Error checking`);
      }
    }

    // N·∫øu kh√¥ng t√¨m th·∫•y, c·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    console.log('\nüîß Setting new password: "123456"');
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash('123456', salt);
    
    await User.findByIdAndUpdate(user._id, { password: hashedPassword });
    console.log('‚úÖ Password updated successfully');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    mongoose.disconnect();
    console.log('‚úÖ Disconnected from MongoDB');
  }
}

checkUserInfo();