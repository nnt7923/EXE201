const mongoose = require('mongoose');
require('dotenv').config();

const Subscription = require('./models/Subscription');
const Plan = require('./models/Plan');

async function fixSubscriptionPlans() {
  try {
    // K·∫øt n·ªëi MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/an-gi-o-dau');
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB');

    // L·∫•y t·∫•t c·∫£ c√°c g√≥i c√≥ s·∫µn
    const plans = await Plan.find().sort({ price: 1 });
    console.log('üìã C√°c g√≥i c√≥ s·∫µn:');
    plans.forEach(plan => {
      console.log(`  - ${plan.name}: ${plan.price} VND (ID: ${plan._id})`);
    });

    // L·∫•y t·∫•t c·∫£ subscription
    const subscriptions = await Subscription.find();
    console.log(`\nüîç Ki·ªÉm tra ${subscriptions.length} subscription...`);

    let fixedCount = 0;

    for (const subscription of subscriptions) {
      if (subscription.plan) {
        // Ki·ªÉm tra xem plan c√≥ t·ªìn t·∫°i kh√¥ng
        const planExists = await Plan.findById(subscription.plan);
        
        if (!planExists) {
          console.log(`‚ùå Subscription ${subscription.subscriptionNumber} c√≥ plan ID kh√¥ng h·ª£p l·ªá: ${subscription.plan}`);
          
          // T√¨m plan ph√π h·ª£p d·ª±a tr√™n gi√° trong pricing
          const planPrice = subscription.pricing?.planPrice;
          let newPlan = null;
          
          if (planPrice) {
            // T√¨m plan c√≥ gi√° ch√≠nh x√°c
            newPlan = plans.find(plan => plan.price === planPrice);
            
            if (!newPlan) {
              // N·∫øu kh√¥ng t√¨m th·∫•y, ch·ªçn plan g·∫ßn nh·∫•t
              newPlan = plans.reduce((prev, curr) => 
                Math.abs(curr.price - planPrice) < Math.abs(prev.price - planPrice) ? curr : prev
              );
            }
          } else {
            // N·∫øu kh√¥ng c√≥ th√¥ng tin gi√°, g√°n plan c∆° b·∫£n
            newPlan = plans.find(plan => plan.name === 'C∆° b·∫£n') || plans[0];
          }
          
          if (newPlan) {
            subscription.plan = newPlan._id;
            await subscription.save();
            console.log(`‚úÖ ƒê√£ g√°n plan "${newPlan.name}" cho subscription ${subscription.subscriptionNumber}`);
            fixedCount++;
          }
        }
      } else {
        console.log(`‚ö†Ô∏è  Subscription ${subscription.subscriptionNumber} kh√¥ng c√≥ plan`);
        
        // G√°n plan c∆° b·∫£n cho subscription kh√¥ng c√≥ plan
        const basicPlan = plans.find(plan => plan.name === 'C∆° b·∫£n') || plans[0];
        if (basicPlan) {
          subscription.plan = basicPlan._id;
          await subscription.save();
          console.log(`‚úÖ ƒê√£ g√°n plan c∆° b·∫£n cho subscription ${subscription.subscriptionNumber}`);
          fixedCount++;
        }
      }
    }

    console.log(`\n‚úÖ Ho√†n th√†nh! ƒê√£ s·ª≠a ${fixedCount} subscription`);

    // Ki·ªÉm tra l·∫°i v·ªõi populate
    console.log('\nüìã Ki·ªÉm tra l·∫°i v·ªõi populate:');
    const populatedSubs = await Subscription.find()
      .populate('plan', 'name price')
      .limit(5);

    for (const sub of populatedSubs) {
      console.log(`   ${sub.subscriptionNumber}: ${sub.plan ? sub.plan.name : 'NULL'}`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi s·ª≠a ch·ªØa d·ªØ li·ªáu:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

fixSubscriptionPlans();