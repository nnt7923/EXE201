const axios = require('axios');
const mongoose = require('mongoose');
const User = require('./models/User');
const Payment = require('./models/Payment');
const SubscriptionPlan = require('./models/SubscriptionPlan');
require('dotenv').config();

const API_BASE = 'http://localhost:5000';

// Mock admin token (trong th·ª±c t·∫ø c·∫ßn login ƒë·ªÉ l·∫•y token)
let adminToken = null;

async function testAllPaymentEndpoints() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    console.log('\nüîç TESTING ALL PAYMENT API ENDPOINTS');
    console.log('==================================================');

    // 1. Test Admin Login ƒë·ªÉ l·∫•y token
    console.log('\n1Ô∏è‚É£ TEST ADMIN LOGIN');
    console.log('------------------------------');
    try {
      const loginResponse = await axios.post(`${API_BASE}/api/auth/login`, {
        email: 'admin@example.com',
        password: 'admin123'
      });
      
      console.log('üìã Login response:', JSON.stringify(loginResponse.data, null, 2));
      
      if (loginResponse.data.success && loginResponse.data.data?.token) {
        adminToken = loginResponse.data.data.token;
        console.log('‚úÖ Admin login th√†nh c√¥ng');
      } else if (loginResponse.data.token) {
        adminToken = loginResponse.data.token;
        console.log('‚úÖ Admin login th√†nh c√¥ng');
      } else {
        console.log('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c admin token');
        console.log('üìã Response structure:', Object.keys(loginResponse.data));
      }
    } catch (error) {
      console.log('‚ùå Admin login th·∫•t b·∫°i:', error.response?.data?.message || error.message);
      if (error.response?.data) {
        console.log('üìã Error response:', JSON.stringify(error.response.data, null, 2));
      }
      console.log('‚ö†Ô∏è S·∫Ω test c√°c endpoint kh√¥ng c·∫ßn auth tr∆∞·ªõc');
    }

    // 2. Test Get Subscription Plans
    console.log('\n2Ô∏è‚É£ TEST GET SUBSCRIPTION PLANS');
    console.log('------------------------------');
    try {
      const plansResponse = await axios.get(`${API_BASE}/api/plans`);
      console.log('‚úÖ Get subscription plans th√†nh c√¥ng');
      console.log('üìã Plans response:', JSON.stringify(plansResponse.data, null, 2));
      
      const plans = plansResponse.data.success ? plansResponse.data.data : plansResponse.data;
      if (Array.isArray(plans)) {
        console.log(`üìä S·ªë l∆∞·ª£ng plans: ${plans.length}`);
        plans.forEach(plan => {
          console.log(`   - ${plan.name}: ${plan.price} VND`);
        });
      } else {
        console.log('‚ùå Response kh√¥ng ph·∫£i array:', typeof plans);
      }
    } catch (error) {
      console.log('‚ùå Get subscription plans th·∫•t b·∫°i:', error.response?.data?.message || error.message);
      if (error.response?.data) {
        console.log('üìã Error response:', JSON.stringify(error.response.data, null, 2));
      }
    }

    // 3. Test Admin Pending Payments (c·∫ßn auth)
    console.log('\n3Ô∏è‚É£ TEST ADMIN PENDING PAYMENTS');
    console.log('------------------------------');
    if (adminToken) {
      try {
        const pendingResponse = await axios.get(`${API_BASE}/api/payments/admin/pending`, {
          headers: { Authorization: `Bearer ${adminToken}` }
        });
        console.log('‚úÖ Get admin pending payments th√†nh c√¥ng');
        
        const pendingPayments = pendingResponse.data.success ? pendingResponse.data.data : pendingResponse.data;
        if (Array.isArray(pendingPayments)) {
          console.log(`üìä S·ªë l∆∞·ª£ng pending payments: ${pendingPayments.length}`);
          pendingPayments.forEach(payment => {
            console.log(`   - ${payment.user?.name}: ${payment.amount} VND (${payment.subscriptionPlan?.name})`);
          });
        } else {
          console.log('‚ùå Response kh√¥ng ph·∫£i array:', typeof pendingPayments);
          console.log('üìã Response:', JSON.stringify(pendingResponse.data, null, 2));
        }
      } catch (error) {
        console.log('‚ùå Get admin pending payments th·∫•t b·∫°i:', error.response?.data?.message || error.message);
        if (error.response?.data) {
          console.log('üìã Error response:', JSON.stringify(error.response.data, null, 2));
        }
      }
    } else {
      console.log('‚ö†Ô∏è B·ªè qua test n√†y v√¨ kh√¥ng c√≥ admin token');
    }

    // 4. Test Admin All Payments (c·∫ßn auth)
    console.log('\n4Ô∏è‚É£ TEST ADMIN ALL PAYMENTS');
    console.log('------------------------------');
    if (adminToken) {
      try {
        const allResponse = await axios.get(`${API_BASE}/api/payments/admin/all`, {
          headers: { Authorization: `Bearer ${adminToken}` }
        });
        console.log('‚úÖ Get admin all payments th√†nh c√¥ng');
        
        const allPayments = allResponse.data.success ? allResponse.data.data?.payments : allResponse.data;
        if (Array.isArray(allPayments)) {
          console.log(`üìä T·ªïng s·ªë payments: ${allPayments.length}`);
          allPayments.forEach(payment => {
            console.log(`   - ${payment.user?.name}: ${payment.amount} VND (${payment.status})`);
          });
        } else {
          console.log('‚ùå Response kh√¥ng ph·∫£i array:', typeof allPayments);
          console.log('üìã Response:', JSON.stringify(allResponse.data, null, 2));
        }
      } catch (error) {
        console.log('‚ùå Get admin all payments th·∫•t b·∫°i:', error.response?.data?.message || error.message);
        if (error.response?.data) {
          console.log('üìã Error response:', JSON.stringify(error.response.data, null, 2));
        }
      }
    } else {
      console.log('‚ö†Ô∏è B·ªè qua test n√†y v√¨ kh√¥ng c√≥ admin token');
    }

    // 5. Test Payment Submission (kh√¥ng c·∫ßn auth, nh∆∞ng c·∫ßn user token)
    console.log('\n5Ô∏è‚É£ TEST PAYMENT SUBMISSION');
    console.log('------------------------------');
    console.log('‚ö†Ô∏è B·ªè qua test n√†y ƒë·ªÉ tr√°nh t·∫°o payment duplicate');
    console.log('   (Endpoint n√†y c·∫ßn user token v√† s·∫Ω t·∫°o payment m·ªõi)');

    // 6. Test Payment Confirmation (c·∫ßn admin auth)
    console.log('\n6Ô∏è‚É£ TEST PAYMENT CONFIRMATION');
    console.log('------------------------------');
    if (adminToken) {
      // L·∫•y payment ID hi·ªán t·∫°i
      const currentPayment = await Payment.findOne({ status: 'pending' });
      if (currentPayment) {
        console.log(`üìã T√¨m th·∫•y pending payment: ${currentPayment._id}`);
        console.log('‚ö†Ô∏è B·ªè qua test confirm ƒë·ªÉ gi·ªØ nguy√™n tr·∫°ng th√°i pending');
        console.log('   (C√≥ th·ªÉ test b·∫±ng c√°ch g·ªçi PUT /api/payments/admin/confirm/:id)');
      } else {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y pending payment ƒë·ªÉ test');
      }
    } else {
      console.log('‚ö†Ô∏è B·ªè qua test n√†y v√¨ kh√¥ng c√≥ admin token');
    }

    // 7. Test Payment Rejection (c·∫ßn admin auth)
    console.log('\n7Ô∏è‚É£ TEST PAYMENT REJECTION');
    console.log('------------------------------');
    if (adminToken) {
      console.log('‚ö†Ô∏è B·ªè qua test reject ƒë·ªÉ gi·ªØ nguy√™n tr·∫°ng th√°i pending');
      console.log('   (C√≥ th·ªÉ test b·∫±ng c√°ch g·ªçi PUT /api/payments/admin/reject/:id)');
    } else {
      console.log('‚ö†Ô∏è B·ªè qua test n√†y v√¨ kh√¥ng c√≥ admin token');
    }

    // 8. Test API Health Check
    console.log('\n8Ô∏è‚É£ TEST API HEALTH CHECK');
    console.log('------------------------------');
    try {
      const healthResponse = await axios.get(`${API_BASE}/api/health`);
      console.log('‚úÖ API health check th√†nh c√¥ng');
      console.log(`üìä Status: ${healthResponse.data.status}`);
    } catch (error) {
      console.log('‚ùå API health check th·∫•t b·∫°i:', error.response?.data?.message || error.message);
    }

    // 9. Test Database Connection Status
    console.log('\n9Ô∏è‚É£ TEST DATABASE CONNECTION');
    console.log('------------------------------');
    const dbState = mongoose.connection.readyState;
    const states = ['disconnected', 'connected', 'connecting', 'disconnecting'];
    console.log(`‚úÖ Database state: ${states[dbState]}`);

    console.log('\n‚úÖ TESTING HO√ÄN T·∫§T');
    console.log('==================================================');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

testAllPaymentEndpoints();