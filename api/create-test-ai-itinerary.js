const mongoose = require('mongoose');
const Itinerary = require('./models/Itinerary');
const User = require('./models/User');

const aiContent = `
**Ng√†y 1:**
- 06:00 - 07:00: Kh·ªüi h√†nh t·ª´ H√≤a L·∫°c ƒëi H√† N·ªôi (∆∞·ªõc t√≠nh 1 gi·ªù di chuy·ªÉn b·∫±ng √¥ t√¥)
- 07:00 - 08:30: ƒÇn s√°ng Ph·ªü B√≤ t·∫°i Ph·ªü Th√¨n (13 L√≤ ƒê√∫c, Hai B√† Tr∆∞ng) - M·ªôt trong nh·ªØng qu√°n ph·ªü n·ªïi ti·∫øng nh·∫•t H√† N·ªôi v·ªõi n∆∞·ªõc d√πng ƒë·∫≠m ƒë√†.
- 08:30 - 10:00: Kh√°m ph√° Ph·ªë C·ªï H√† N·ªôi (H√†ng B·∫°c, H√†ng Gai, H√†ng ƒê√†o) - D·∫°o b·ªô v√† c·∫£m nh·∫≠n nh·ªãp s·ªëng c·ªßa khu ph·ªë c·ªï k√≠nh.
- 10:00 - 11:30: Th∆∞·ªüng th·ª©c B√°nh M√¨ P√¢t√© t·∫°i B√°nh M√¨ 25 (25 H√†ng C√°, Ho√†n Ki·∫øm) - B√°nh m√¨ p√¢t√© truy·ªÅn th·ªëng v·ªõi nh√¢n ƒë·∫ßy ƒë·∫∑n v√† gi√≤n tan.
- 11:30 - 13:00: ƒÇn tr∆∞a B√∫n ƒê·∫≠u M·∫Øm T√¥m t·∫°i B√∫n ƒê·∫≠u M·∫Øm T√¥m Ng√µ G·∫°ch (Ng√µ G·∫°ch, Ho√†n Ki·∫øm) - Tr·∫£i nghi·ªám m√≥n b√∫n ƒë·∫≠u m·∫Øm t√¥m chu·∫©n v·ªã, ƒë·∫ßy ƒë·ªß nem, ch·∫£ c·ªëm, d·ªìi s·ª•n.
- 13:30 - 14:30: Th∆∞·ªüng th·ª©c C√† Ph√™ Tr·ª©ng t·∫°i Caf√© Gi·∫£ng (39 Nguy·ªÖn H·ªØu Hu√¢n, Ho√†n Ki·∫øm) - M·ªôt trong nh·ªØng qu√°n c√† ph√™ tr·ª©ng l√¢u ƒë·ªùi v√† n·ªïi ti·∫øng nh·∫•t H√† N·ªôi.
- 14:30 - 15:30: D·∫°o quanh H·ªì Ho√†n Ki·∫øm v√† C·∫ßu Th√™ H√∫c - T·∫≠n h∆∞·ªüng kh√¥ng kh√≠ trong l√†nh v√† v·∫ª ƒë·∫πp bi·ªÉu t∆∞·ª£ng c·ªßa th·ªß ƒë√¥.
- 15:30 - 16:30: Tr·∫£i nghi·ªám ·∫©m th·ª±c ƒë∆∞·ªùng ph·ªë kh√°c (Ch√® b·ªën m√πa H√†ng C√¢n, Kem Tr√†ng Ti·ªÅn) - Ti·∫øp t·ª•c h√†nh tr√¨nh kh√°m ph√° c√°c m√≥n ƒÉn v·∫∑t ƒë·∫∑c tr∆∞ng c·ªßa H√† N·ªôi.
- 16:30 - 18:00: Mua s·∫Øm qu√† l∆∞u ni·ªám ·∫©m th·ª±c t·∫°i H√†ng ƒê∆∞·ªùng (√î Mai H·ªìng Lam, B√°nh C·ªëm Nguy√™n Ninh) - Ch·ªçn mua nh·ªØng m√≥n qu√† mang h∆∞∆°ng v·ªã H√† N·ªôi cho ng∆∞·ªùi th√¢n.
- 18:00 - 19:30: ƒÇn t·ªëi L·∫©u B√≤ Nh√∫ng D·∫•m t·∫°i Qu√°n G·∫ßm C·∫ßu (C·∫ßu G·ªó, Ho√†n Ki·∫øm) - M·ªôt b·ªØa t·ªëi ·∫•m c√∫ng v√† ƒë·∫ßy ƒë·ªß h∆∞∆°ng v·ªã truy·ªÅn th·ªëng.
- 19:30 - 21:00: Di chuy·ªÉn v·ªÅ l·∫°i H√≤a L·∫°c (∆∞·ªõc t√≠nh 1.5 gi·ªù di chuy·ªÉn b·∫±ng √¥ t√¥)
- 21:00: K·∫øt th√∫c h√†nh tr√¨nh t·∫°i H√≤a L·∫°c
`;

async function createTestAiItinerary() {
  try {
    await mongoose.connect('mongodb://localhost:27017/an-gi-o-dau-platform');
    console.log('Connected to MongoDB');

    // Find the specific user by ID from login response
    const user = await User.findById('68ef55e2912dcc3428322fbd');
    if (!user) {
      console.log('‚ùå User 68ef55e2912dcc3428322fbd not found.');
      process.exit(1);
    }

    console.log('üë§ Found user:', user.email);

    // Create test AI itinerary
    const itinerary = new Itinerary({
      title: 'Test AI Itinerary - H√†nh Tr√¨nh ·∫®m Th·ª±c H√† N·ªôi',
      date: new Date(),
      description: 'L·ªãch tr√¨nh AI test ƒë·ªÉ ki·ªÉm tra hi·ªÉn th·ªã timeline',
      aiContent: aiContent,
      activities: [],
      isAiGenerated: true,
      user: user._id,
      isActive: true
    });

    const savedItinerary = await itinerary.save();
    
    console.log('‚úÖ Test AI itinerary created successfully!');
    console.log('üìä Itinerary details:');
    console.log('   _id:', savedItinerary._id);
    console.log('   title:', savedItinerary.title);
    console.log('   isAiGenerated:', savedItinerary.isAiGenerated);
    console.log('   hasAiContent:', !!savedItinerary.aiContent);
    console.log('   aiContentLength:', savedItinerary.aiContent?.length || 0);
    console.log('   user:', savedItinerary.user);
    
    console.log('\nüîó Frontend URL:');
    console.log(`   http://localhost:3000/itineraries/${savedItinerary._id}`);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error:', error);
    process.exit(1);
  }
}

createTestAiItinerary();