const mongoose = require('mongoose');
require('dotenv').config();

const User = require('./models/User');
const Plan = require('./models/Plan');
const Subscription = require('./models/Subscription');

const createTestSubscription = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // T√¨m user test
    const user = await User.findOne({ email: 'test@example.com' });
    if (!user) {
      console.log('‚ùå Test user not found');
      return;
    }
    console.log('üë§ Found test user:', user._id);

    // T√¨m plan "Chuy√™n nghi·ªáp"
    const plan = await Plan.findOne({ name: 'Chuy√™n nghi·ªáp' });
    if (!plan) {
      console.log('‚ùå Plan "Chuy√™n nghi·ªáp" not found');
      return;
    }
    console.log('üìã Found plan:', plan.name, 'AI Limit:', plan.aiSuggestionLimit);

    // X√≥a subscription c≈© n·∫øu c√≥
    await Subscription.deleteMany({ user: user._id });
    console.log('üóëÔ∏è Deleted old subscriptions');

    // T·∫°o subscription m·ªõi
    const subscription = new Subscription({
      user: user._id,
      plan: plan._id,
      status: 'active',
      paymentStatus: 'paid',
      startDate: new Date(),
      endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y
      subscriptionNumber: `SUB-TEST-${Date.now()}`,
      customerInfo: {
        name: user.name,
        email: user.email,
        phone: '0123456789',
        address: 'Test Address'
      },
      pricing: {
        planPrice: plan.price,
        serviceFee: 0,
        taxes: 0,
        totalAmount: plan.price
      }
    });

    await subscription.save();
    console.log('‚úÖ Test subscription created:', {
      id: subscription._id,
      user: subscription.user,
      plan: subscription.plan,
      status: subscription.status,
      paymentStatus: subscription.paymentStatus,
      endDate: subscription.endDate
    });

    // Verify subscription v·ªõi populate
    const verifySubscription = await Subscription.findById(subscription._id).populate('plan');
    console.log('üîç Verified subscription:', {
      id: verifySubscription._id,
      planName: verifySubscription.plan.name,
      aiLimit: verifySubscription.plan.aiSuggestionLimit,
      status: verifySubscription.status,
      paymentStatus: verifySubscription.paymentStatus
    });

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await mongoose.disconnect();
  }
};

createTestSubscription();