// Test script ƒë·ªÉ ki·ªÉm tra JSON parsing trong browser
// Ch·∫°y script n√†y trong browser console ƒë·ªÉ test

// Test data gi·ªëng nh∆∞ AI response
const testJsonContent = `{
  "content": "# L·ªãch tr√¨nh H√≤a L·∫°c - 1 ng√†y\\n\\n## Ng√†y 1: Th·ª© S√°u, 31 th√°ng 10, 2025\\n\\n### S√°ng:\\n- **8:00 - 9:00**: Kh·ªüi h√†nh t·ª´ H√† N·ªôi ƒë·∫øn H√≤a L·∫°c\\n- **9:00 - 10:30**: Tham quan Khu c√¥ng ngh·ªá cao H√≤a L·∫°c\\n\\n### Tr∆∞a:\\n- **11:00 - 12:00**: ThƒÉm quan ƒê·∫°i h·ªçc FPT\\n- **12:00 - 13:30**: ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng\\n\\n### Chi·ªÅu:\\n- **14:00 - 16:00**: Kh√°m ph√° khu v·ª±c xung quanh\\n- **16:00 - 17:00**: Quay v·ªÅ H√† N·ªôi"
}`;

const testPlainContent = `# L·ªãch tr√¨nh H√≤a L·∫°c - 1 ng√†y

## Ng√†y 1: Th·ª© S√°u, 31 th√°ng 10, 2025

### S√°ng:
- **8:00 - 9:00**: Kh·ªüi h√†nh t·ª´ H√† N·ªôi ƒë·∫øn H√≤a L·∫°c
- **9:00 - 10:30**: Tham quan Khu c√¥ng ngh·ªá cao H√≤a L·∫°c

### Tr∆∞a:
- **11:00 - 12:00**: ThƒÉm quan ƒê·∫°i h·ªçc FPT
- **12:00 - 13:30**: ƒÇn tr∆∞a t·∫°i nh√† h√†ng ƒë·ªãa ph∆∞∆°ng

### Chi·ªÅu:
- **14:00 - 16:00**: Kh√°m ph√° khu v·ª±c xung quanh
- **16:00 - 17:00**: Quay v·ªÅ H√† N·ªôi`;

// Function ƒë·ªÉ test parsing (copy t·ª´ code)
function testParseAiContentToTimeline(content) {
  console.log('üß™ Testing parseAiContentToTimeline with content:', content.substring(0, 100) + '...');
  
  // Try to parse as JSON first (new format)
  try {
    const jsonData = JSON.parse(content);
    if (jsonData.content) {
      console.log('‚úÖ Successfully parsed as JSON, using content field');
      content = jsonData.content;
    }
  } catch (error) {
    console.log('‚ÑπÔ∏è AI content is not JSON, parsing as plain text');
  }
  
  const timeline = [];
  const lines = content.split('\n');
  let currentDay = null;
  let currentTime = '08:00';
  
  console.log('üìù Processing lines:', lines.length);
  
  lines.forEach((line, index) => {
    const trimmedLine = line.trim();
    console.log(`Line ${index}: "${trimmedLine}"`);
    
    // Check for day headers
    if (trimmedLine.match(/^#+\s*Ng√†y \d+/i) || trimmedLine.match(/^Ng√†y \d+/i)) {
      if (currentDay) {
        timeline.push(currentDay);
      }
      currentDay = {
        day: trimmedLine.replace(/^#+\s*/, ''),
        activities: []
      };
      console.log('üìÖ Found day:', currentDay.day);
    }
    // Check for time-based activities
    else if (trimmedLine.match(/^\*?\*?\s*\d{1,2}:\d{2}/)) {
      const timeMatch = trimmedLine.match(/(\d{1,2}:\d{2})\s*-?\s*(\d{1,2}:\d{2})?[:\-\s]*(.+)/);
      if (timeMatch && currentDay) {
        const activity = {
          time: timeMatch[1],
          startTime: timeMatch[1],
          endTime: timeMatch[2] || '',
          description: timeMatch[3].replace(/^\*+\s*/, '').trim(),
          type: 'sightseeing'
        };
        currentDay.activities.push(activity);
        console.log('‚è∞ Found activity:', activity);
      }
    }
  });
  
  if (currentDay) {
    timeline.push(currentDay);
  }
  
  console.log('üìä Final timeline:', timeline);
  return timeline;
}

// Test v·ªõi JSON content
console.log('=== Testing JSON Content ===');
testParseAiContentToTimeline(testJsonContent);

console.log('\n=== Testing Plain Content ===');
testParseAiContentToTimeline(testPlainContent);